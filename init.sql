-- Creazione del database
CREATE DATABASE FantaSchool;
USE FantaSchool;


-- Tabella UTENTE
CREATE TABLE UTENTE (
    ID_UTENTE INT AUTO_INCREMENT PRIMARY KEY,
    NOME VARCHAR(50) NOT NULL,
    COGNOME VARCHAR(50) NOT NULL,
    EMAIL VARCHAR(100) UNIQUE NOT NULL,
    NOME_UTENTE VARCHAR(30) NOT NULL CHECK (NOME_UTENTE REGEXP '^[a-zA-Z]+$'),
    TIPO_UTENTE ENUM('BASE', 'PREMIUM') DEFAULT 'BASE'
);

-- Tabella SERVIZI_PREMIUM
CREATE TABLE SERVIZI_PREMIUM (
    ID_SERVIZIO INT AUTO_INCREMENT PRIMARY KEY,
    NOME VARCHAR(50) NOT NULL,
    COSTO DECIMAL(10, 2) NOT NULL
);

-- Tabella VIDEO_PUBBLICITARI
CREATE TABLE VIDEO_PUBBLICITARI (
    ID_VIDEO INT AUTO_INCREMENT PRIMARY KEY,
    DESCRIZIONE VARCHAR(255) NOT NULL
);

-- Tabella SQUADRA
CREATE TABLE SQUADRA (
    ID_SQUADRA INT AUTO_INCREMENT PRIMARY KEY,
    ID_UTENTE INT NOT NULL,
    PUNTI INT DEFAULT 0,
    POSIZIONE INT,
    FOREIGN KEY (ID_UTENTE) REFERENCES UTENTE(ID_UTENTE)
);

-- Tabella LEGA
CREATE TABLE LEGA (
    ID_LEGA INT AUTO_INCREMENT PRIMARY KEY,
    NOME VARCHAR(50) NOT NULL,
    TIPO ENUM('PUBBLICA', 'PRIVATA') NOT NULL,
    LINK_INVITO VARCHAR(255),
    NUMERO_PARTECIPANTI INT DEFAULT 0,
    HOST_ID INT NOT NULL,
    FOREIGN KEY (HOST_ID) REFERENCES UTENTE(ID_UTENTE)
);

-- Tabella GIOCATORE
CREATE TABLE GIOCATORE (
    ID_GIOCATORE INT AUTO_INCREMENT PRIMARY KEY,
    NOME VARCHAR(50) NOT NULL,
    COGNOME VARCHAR(50) NOT NULL,
    MEDIA DECIMAL(5, 2),
    BONUS DECIMAL(5, 2),
    MALUS DECIMAL(5, 2),
    PUNTEGGIO DECIMAL(5, 2),
    PUNTEGGIO_MEDIO DECIMAL(5, 2)
);

-- Tabella MATCH
CREATE TABLE MATCH (
    ID_MATCH INT AUTO_INCREMENT PRIMARY KEY,
    ID_SQUADRA1 INT NOT NULL,
    ID_SQUADRA2 INT NOT NULL,
    MODALITA ENUM('SQUADRA', 'SINGOLO') NOT NULL,
    PUNTEGGIO_TOTALE DECIMAL(10, 2),
    VINCITORE INT,
    FOREIGN KEY (ID_SQUADRA1) REFERENCES SQUADRA(ID_SQUADRA),
    FOREIGN KEY (ID_SQUADRA2) REFERENCES SQUADRA(ID_SQUADRA),
    FOREIGN KEY (VINCITORE) REFERENCES SQUADRA(ID_SQUADRA)
);

-- Tabella CLASSIFICA
CREATE TABLE CLASSIFICA (
    ID_CLASSIFICA INT AUTO_INCREMENT PRIMARY KEY,
    ID_LEGA INT NOT NULL,
    ID_SQUADRA INT NOT NULL,
    POSIZIONE INT NOT NULL,
    FOREIGN KEY (ID_LEGA) REFERENCES LEGA(ID_LEGA),
    FOREIGN KEY (ID_SQUADRA) REFERENCES SQUADRA(ID_SQUADRA)
);

-- Tabella FORMAZIONE
CREATE TABLE FORMAZIONE (
    ID_FORMAZIONE INT AUTO_INCREMENT PRIMARY KEY,
    ID_SQUADRA INT NOT NULL,
    GIOCATORI_TITOLARI JSON NOT NULL,
    GIOCATORI_RISERVE JSON NOT NULL,
    FOREIGN KEY (ID_SQUADRA) REFERENCES SQUADRA(ID_SQUADRA)
);

-- Relazioni tra UTENTE e SERVIZI_PREMIUM (storico accessi)
CREATE TABLE ACCESSO_PREMIUM (
    ID_ACCESSO INT AUTO_INCREMENT PRIMARY KEY,
    ID_UTENTE INT NOT NULL,
    ID_SERVIZIO INT NOT NULL,
    DATA_INIZIO DATE NOT NULL,
    DATA_FINE DATE,
    FOREIGN KEY (ID_UTENTE) REFERENCES UTENTE(ID_UTENTE),
    FOREIGN KEY (ID_SERVIZIO) REFERENCES SERVIZI_PREMIUM(ID_SERVIZIO)
);

-- Relazioni tra UTENTE e VIDEO_PUBBLICITARI (storico visualizzazioni)
CREATE TABLE VISUALIZZAZIONI_VIDEO (
    ID_VISUALIZZAZIONE INT AUTO_INCREMENT PRIMARY KEY,
    ID_UTENTE INT NOT NULL,
    ID_VIDEO INT NOT NULL,
    DATA_VISUALIZZAZIONE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (ID_UTENTE) REFERENCES UTENTE(ID_UTENTE),
    FOREIGN KEY (ID_VIDEO) REFERENCES VIDEO_PUBBLICITARI(ID_VIDEO)
);

-- Relazioni tra SQUADRA e LEGA
CREATE TABLE PARTECIPAZIONE_LEGA (
    ID_PARTECIPAZIONE INT AUTO_INCREMENT PRIMARY KEY,
    ID_SQUADRA INT NOT NULL,
    ID_LEGA INT NOT NULL,
    FOREIGN KEY (ID_SQUADRA) REFERENCES SQUADRA(ID_SQUADRA),
    FOREIGN KEY (ID_LEGA) REFERENCES LEGA(ID_LEGA)
);

-- Relazioni tra SQUADRA e GIOCATORE (composizione squadra)
CREATE TABLE COMPOSIZIONE_SQUADRA (
    ID_COMPOSIZIONE INT AUTO_INCREMENT PRIMARY KEY,
    ID_SQUADRA INT NOT NULL,
    ID_GIOCATORE INT NOT NULL,
    TIPO ENUM('TITOLARE', 'RISERVA') NOT NULL,
    FOREIGN KEY (ID_SQUADRA) REFERENCES SQUADRA(ID_SQUADRA),
    FOREIGN KEY (ID_GIOCATORE) REFERENCES GIOCATORE(ID_GIOCATORE)
);
